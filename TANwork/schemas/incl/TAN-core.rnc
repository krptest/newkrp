default namespace = "tag:textalign.net,2015:ns"

start = element TAN-T { empty }
# PART ONE OF THREE: PATTERNS REPEATEDLY USED ACROSS DIFFERENT TAN FILES 

#   1A. ATOMIC PATTERNS (alphabetical)
agent-ref =
    
    ## names an <agent>
    attribute who { text }
attr-cert =
    
    ## states how certain an agent is of the data governed by the parent element, expressed as a real number from 0 (no certainty) to 1 (completely certainty).
    
    ##  This attribute is taken into account before all other attributes except @claimant. That is, @cert is to be interpreted to mean: "@claimant has @cert confidence about the following data:...."
    
    ## Values of @cert amplify. Any @cert will be multiplied against any other values of @cert in a given context. For example, if an <l> and an <m> in a TAN-A-lm file each have a certainty of 0.5, then the lexico-morphological combination of the two is 0.25. In a TAN-A-tok file, if an <align> has a certainty of 0.6 and a child <tok> has a certainty of 0.3, then that <tok>'s actual certainty is 0.18.
    
    ## This attribute is inheritable. See main.xml#inheritable_attributes
    attribute cert { cert-content }
attr-cert2 =
    
    ## provides a second measure of certainty. The value is taken along with @cert as the range in which an editors certainty resides. 
    attribute cert2 { cert-content }
certainty-stamp = cert-claim?, ed-stamp?
cert-claim = attr-cert | (attr-cert, attr-cert2)
cert-content = xsd:double { pattern = "1|0|(0\.\d*[1-9])" }

## String that specifies a range of divs using the div-ref pattern joined by a hyphen or a comma.

## String that specifies a single <div>
div-item-ref = xsd:string { pattern = "(\w+([^\w\-]\w+)*)|.*\?\?\?.*" }
div-range-ref =
    xsd:string {
        pattern = "(\w+([^\w\-]\w+)*)(((\s*-\s*)|(\s*,\s+))(\w+([^\w\-]\w+)*))*|.*\?\?\?.*"
    }
ed-agent =
    
    ## refers to one or more <agent>s who have edited (added or modified) an element or its content.
    
    ## Along with @ed-when, this forms the Edit Stamp pattern. See main.xml#edit_stamp
    
    ## This attribute is inheritable. See main.xml#inheritable_attributes
    attribute ed-who { text }
ed-time =
    
    ## marks the date or time when an element or its content was edited (added or modified)
    
    ## The value of must always conform to an ISO date or dateTime pattern. See main.xml#date_and_datetime.
    
    ## Along with @ed-who, this forms the Edit Stamp pattern. See main.xml#edit_stamp
    
    ## This attribute is inheritable. See main.xml#inheritable_attributes
    attribute ed-when { xsd:dateTime | xsd:date }
element-scope =
    
    ## names one or more TAN elements that the keywords apply to.
    
    ## This attribute is non-cumulatively inheritable. An element will be affected only by its values of @affects-element and not those of its ancestors.
    attribute affects-element { text }
error-flag =
    
    ## indicates the level of error that should be flagged to any algorithm that uses the parent element . Similar to Schematron's @role, but under a different name, to avoid confusion with TAN @roles.
    attribute flags {
        xsd:string { pattern = "warning|error|info|fatal" }
    }
func-param-pattern =
    
    ## specifies a regular expression pattern to be searched for or matched. TAN regular expressions include an extended syntax, most noted by the special escape character \k{}. 
    
    ## For more see main.xml#regular_expressions and https://www.w3.org/TR/xpath-functions-30/#regex-syntax
    attribute pattern { text }
func-param-flags =
    
    ## specifies flags to be applied in an XPath function that uses regular expressions.
    
    ## s = dot-all mode; m = multi-line mode; i = case-insensitive mode; x = remove whitespace characters from regular expression; q = no metacharacters 
    
    ## For more see http://www.w3.org/TR/xpath-functions-30/#flags
    attribute flags {
        xsd:string { pattern = "[smixq]+" }
    }
group-ref =
    
    ## identifies one or more <group-type>s under which the parent element, and its children, should be grouped.
    
    ## This attribute is cumulatively inheritable. An <item> will be affected by its values of @group and those of its ancestors.
    attribute group { text }
help-opt =
    
    ## requests help on the context element. This attribute is equivalent to the help requested string, ???, but is useful in cases where the string cannot be placed (e.g., elements with no content or few attributes)
    attribute help { empty }
href-opt =
    
    ## points to the location of a file. In some contexts, this attribute is allowed only as a temporary measure, to invoke editing assistance by means of Schematron Quick Fixes.
    attribute href { text }
inclusion-att =
    
    ## signals that the parent element is to be replaced by all elements of the same name found in the referred <inclusion>.
    attribute include { text }
internal-non-xml-id =
    
    ## identifies an entity described within an element. Must be unique within a given file. Must consist only of non-spacing characters.
    attribute id {
        xsd:string { pattern = "\S+" }
    }
internal-xml-id =
    
    ## identifies an entity described within an element. Must be unique within a given file. Must consist only of word characters.
    attribute xml:id { text }
internal-idrefs =
    
    ## contains references to one or more values of @xml:id or @id in the file 
    attribute idrefs { text }

## Any generic IRI identifier.
IRI-gen = xsd:anyURI { pattern = "[a-zA-Z][\-.+a-zA-Z0-9]+:\S+" }

## String that specifies a single item from a sequence: digits or "last(-digit)?" Similar to seq-picker.
item-picker = xsd:string { pattern = "((last|max)|((last|max)-\d+)|(\d+))|.*\?\?\?.*" }
n =
    
    ## names a <div> or <group>. 
    
    ## If @n is to be given more than one value, those items must be separated by a space, a comma, or some other non-word character except the hyphen. A hyphen may be used between numbers to specify a range. This feature is useful for cases where a <div> straddles reference markers (e.g., a translation of Aristotle that cannot be easily tied to Bekker numbers).
    attribute n { text }
TAN-ver =
    
    ## specifies the version of TAN schemas used. 
    attribute TAN-version { xsd:string "2018" }
keyword-ref =
    
    ## used to point to a reserved keyword, either a reserved tokenization pattern or a relationship.
    attribute which { text }
lang-of-content =
    
    ## specifies a language code that names the language of the text enclosed by the parent element. Values are inherited by all descendants except for those that have an @xml:lang and their descendants.  
    
    ## Values should adhere to BCP (Best Common Practices) 47, http://www.rfc-editor.org/rfc/bcp/bcp47.txt. For more details see main.xml#language.
    
    ## Examples: 'eng' (English), 'grc' (classical Greek), 'lat' (Latin) 
    attribute xml:lang { xsd:language }
lang-outside =
    
    ## specifies a language that is being discussed. This element does NOT name the language of the text enclosed by the parent element, which is the province of @xml:lang.
    
    ## Values should adhere to BCP (Best Common Practices) 47, http://www.rfc-editor.org/rfc/bcp/bcp47.txt. For more details see main.xml#language.
    
    ## Examples: 'eng' (English), 'grc' (classical Greek), 'lat' (Latin). For more see main.xml#language
    element for-lang { xsd:language }

## specifies whether the creation and editing of the data is still in progress. Default value is true.
period-ref =
    
    ## names one or more <period>s.
    attribute period { text }
progress =
    
    ## specifies whether or not the editors of the current file have not yet finished supplying the data, intend to make important changes, or otherwise wish to reserve the right to make major changes. 
    
    ## This attribute does not claim that the data is perfect or that it will not be changed. Rather, it signals to users, especially those who would use the file the object of a <source>, <see-also>, or <inclusion>, the possibility of major work that may render dependent data as wrong or invalid. 
    attribute in-progress { xsd:boolean }
relationship =
    
    ## names one or more <relationship>s
    attribute relationship { text }
licensor =
    
    ## specifies one or more <agent>s who hold the rights over the material specified by the parent element (either the data of the current file, or of the source that forms the basis for the data).
    
    ## Nothing should be inferred from a missing @licensor from <rights-source-only>. Its absence does not mean that the rightsholder is unknown or nonexistent. For more, see main.xml#license
    attribute licensor { text }
object-datatype =
    
    ## specifies the type of data that the object must take. This attribute is intended to specify that a particular verb governs raw units, not entities definable by the IRI + name pattern. Use this attribute if and only if the verb may not govern objects defined in <definitions>.
    attribute object-datatype {
        xsd:string {
            pattern =
                "string|boolean|decimal|float|double|duration|dateTime|time|date|gYearMonth|gYear|gMonthDay|gDay|gMonth|hexBinary|base64Binary|anyURI|QName|normalizedString|token|language|NMTOKEN|NMTOKENS|Name|NCName|ID|IDREF|IDREFS|ENTITY|ENTITIES|integer|nonPositiveInteger|negativeInteger|long|int|short|byte|nonNegativeInteger|unsignedLong|unsignedInt|unsignedShort|unsignedByte|positiveInteger"
        }
    }
object-lexical-constraint =
    
    ## specifies a regular expression that constrains the value of any <object>. 
    
    ## Note that the regular expression will be strictly followed, e.g., "\d+" will be satisfied by "a1" (because there is at least on digit). If you wish to constrain the entire value, be sure to use ^ and $, e.g., "^\d+$". 
    attribute object-lexical-constraint { text }
role-ref =
    
    ## refers to the ID of one or more <role>s
    attribute roles { text }

## String that specifies a range of items in a sequence: digits or "last(-digit)?" joined by hyphens (ranges) or commas. Similar to item-picker.
seq-picker =
    xsd:string {
        pattern =
            "((last|max|all|\*)|((last|max)-\d+)|(\d+))(\s*-\s*(((last|max))|((last|max)-\d+)|(\d+)))?(\s*[, ]\s*(((last|max))|((last|max)-\d+)|(\d+))(\s+-\s+(((last|max))|((last|max)-\d+)|(\d+)))?)*|.*\?\?\?.*"
    }
sources-ref = empty
type =
    
    ## indicates what type of its parent element. In the context of <div> it specifies a type of textual unit, defined by a <div-type>. In the context of <group> it specifies a kind of group defined by a <group-type>.
    attribute type { text }

## Tag URN, mandatory pattern for the IRI name of every TAN file 
URI-tag =
    xsd:anyURI {
        pattern =
            "tag:([\-a-zA-Z0-9._%+]+@)?[\-a-zA-Z0-9.]+\.[A-Za-z]{2,4},\d{4}(-(0\d|1[0-2]))?(-([0-2]\d|3[01]))?:\S+"
    }
when-claim =
    
    ## indicates a date or date and time
    attribute when { xsd:dateTime | xsd:date }
# 
#   1B. NON-ATOMIC PATTERNS (alphabetical)
action-condition = action-simple-condition | action-complex-condition
action-simple-condition = action-condition-attributes
action-condition-attributes = empty
action-complex-condition =
    
    ## identifies a condition that must be true for the following actions to be evaluated.
    
    ## The condition must be true for at least one value in every attribute.
    element where { ed-stamp?, action-condition-attributes }+
checksum =
    
    ## specifies some checksum that can be used to confirm the identity of a digital file being referred to. This element contains other elements that define the type and value of the checksum. Must begin with an IRI + name pattern that defines the type of checksum being used (e.g., SHA-1).
    
    ## This element allows later users ensure that a copies of a file are identical. 
    
    ## The checksum will not be generated, checked, or validated by TAN schemas. Checksum validation must be provided by other means.
    element checksum {
        entity-nondigital-ref,
        
        ## states the value of a <checksum>
        element value { string }
    }
comment =
    
    ## discusses issues relevant to nearby data. Must credit an <agent>, specified by @who, and a time the comment was made, specified by @when.
    element comment { when-claim, agent-ref, text }
constraints-on-entity = constraints-on-verb
constraints-on-verb = object-datatype, object-lexical-constraint?

## Editorial stamp: who created or edited the enclosed data and when. 
ed-stamp = ed-agent, ed-time
# 
#    FOUR TYPES OF ENTITIES THAT CAN BE REFERENCED USING THE IRI+NAME PATTERN

## Reference to an external digital entity that is a TAN file; unlike other types, the keyword-ref option much be turned on and off for specific elements (e.g., not advisable for <inclusion>)
entity-digital-tan-other-ref = href-opt | (IRI-gen-ref, metadata-human, checksum*, loc-src+)

## Reference to an external digital entity that is not a TAN file
entity-digital-generic-ref = (IRI-gen-ref+, metadata-human, checksum*, loc-src+) | keyword-ref

## Reference to self as digital entity (i.e., TAN file)
entity-digital-tan-self-ref = metadata-human, loc-self*

## Reference to an external non-digital entity (e.g., persons, roles, works, topics)
entity-nondigital-ref = (IRI-gen-ref+, metadata-human) | keyword-ref

## Reference to a nondigital entity that has constraints on its use
entity-nondigital-with-constraints-ref =
    (constraints-on-entity?, IRI-gen-ref+, metadata-human) | keyword-ref

## Reference to a definition of a token
entity-tok-def = defn-tok-def, metadata-human
inclusion = inclusion-att, help-opt?
IRI-gen-ref =
    
    ## contains an International Resource Identifier that serves as a name for the a concept, person, or thing referred to by the parent element. IRIs are explained at main.xml#IRIs_and_linked_data.
    
    ## Any kind of IRIs are allowed: URLs, tag URNs, UUIDs, etc. For names of well-known resources, a URL identifier might be preferred (http://...), to facilitate linked data. If an entity/resource lacks a suitable URL-type name, you may use or coin any other valid IRI, such as a UUID, a tag URN, or an OID. Some concepts may be difficult to find IRIs for.
    
    ## Sibling <IRI>s are to be treated as names for the same thing, not as names of different things. Nevertheless, they are not synonymous, only poecilonymic. In the terms of Web Ontology Language (http://www.w3.org/TR/owl-ref/), sibling <IRI>s cannot be assumed to share the relationship owl:sameAs, because they will draw from independent vocabularies that may define similar concepts differently. 
    
    ## An element defined with multiple <IRI>s is technically within the intersection, not the union, of those definitions. Nevertheless, most interpretations of TAN files will draw inferences based upon the union. That is, if item A is defined by IRI X, item B by IRIs X and Y, and item C with IRI Y, it is likely that users of the data will infer identity between items A and C. It is advisable to be cautious is assigning multiple IRIs to entities.
    
    ## The element is named IRI instead of URI to encourage internationalization. Alphabets other than the Latin are welcome. 
    element IRI { ed-stamp?, IRI-gen }
loc-self =
    
    ## points to a location where a master copy of the file is to be found. Use of this element entails a commitment to updating the TAN file in those locations. Also, if @in-progress is false, a <master-location> must be provided.
    
    ## The URL may be absolute or relative to the current document. 
    
    ## <master-location> does not disallow the file from being kept, published, or distributed elsewhere. It merely points to the main locations where an authoritative version of the file is to be found. 
    element master-location { ed-stamp?, href-opt }
loc-src =
    
    ## declares where an electronic file was found and when. 
    
    ## The URL may be absolute or relative to the current document. 
    element location {
        ed-stamp?,
        
        ## specifies when an electronic file was last examined
        attribute when-accessed { xsd:date | xsd:dateTime },
        href-opt
    }
metadata-desc =
    ed-stamp?,
    (lang-of-content?,
     xsd:string { pattern = "(.|\n)+" })
metadata-human =
    
    ## provides a human-readable name of a concept, person, or thing referred to by the parent element (or the current document, if the parent element is <head>)
    element name { metadata-desc }+,
    
    ## provides a description of a concept, person, or thing referred to by the parent element (or the current document, if the parent element is <head>). <desc> is, in effect, a <comment> about that concept, person, or thing. It has two possible structures, one human-readable and the other computer-readable.
    
    ## Under the first, human-readable approach, <desc> takes merely a descriptive text about the entity, optionally with @xml:lang. If you provide descriptions in other languages, it best to make sure that each version says roughly the same thing.
    
    ## Under the second, computer-readable approach, <desc> takes an IRI + name pattern plus <location> and @href pointing to a <TAN-c> file, which provides contextual information about the concept, person, or thing. 
    element desc { metadata-desc | (keyword-ref | entity-digital-tan-other-ref) }*
# PART TWO OF THREE: STRUCTURE COMMON TO ALL TAN FILES
TAN-root =
    
    ## contains a tag URN that permanently and uniquely names the current file, the so-called IRI Name of the current file. See main.xml#iri_name for discussion.
    
    ## For more on the syntax of tag URNs see main.xml#tag_urn
    attribute id { URI-tag },
    TAN-ver,
    ed-stamp?,
    TAN-head,
    TAN-body,
    TAN-tail?
# HEAD
TAN-head =
    
    ## contains the metadata (data about the data contained by <body>)
    
    ## This element indicates at a bare minimum the name of the file, the sources, the most significant parts of the editorial history; the linguistic or scholarly conventions that have been adopted in creating the data; the license, i.e., who holds what rights to the data, and what kind of reuse is allowed; the persons, organizations, or entities that helped create the data, and the roles played by each.
    
    ## The structure of <head> is shared across TAN files, with differences between them isolated to the child <definitions>.
    element head {
        ed-stamp?,
        (comment*
         & (head-prelude,
            (inclusion-list & key-list & source-list & see-also-list),
            definition-list,
            alter-statement,
            resp-list,
            change-log))
    }
head-prelude = head-prelude-core, head-prelude-non-core
head-prelude-core = entity-digital-tan-self-ref, nonsource-license
head-prelude-non-core = empty
nonsource-license =
    
    ## states the license under which the data is distributed and the rights associated with it, EXCLUSIVE of any rights attached to the source.
    
    ## Diligently check to ensure that the license you have claimed respects the rights of your sources' rightsholders. It is recommended that you license your data under a license that is similar to or more liberal than the one under which your sources have been released.
    
    ## For more discussion, see main.xml#license and for a list of standard vocabulary, main.xml# keywords-rights-excluding-sources
    element license {
        ed-stamp?,
        (inclusion | (comment* & entity-nondigital-ref))
    },
    element licensor { ed-stamp?, (inclusion | agent-ref) }
inclusion-list = inclusion-item*
inclusion-item =
    
    ## specifies a TAN file that is available for inclusion. An inclusion occurs whenever an element X points to this inclusion by means of @include. TAN-compliant validators and processors will find every X that is found in the included file (checked recursively, against any inclusions of X adopted by the inclusion) and insert them at that place in the main document.
    
    ## Only select elements will be included, not the entire inclusion file. Exactly which elements are included is dictated by @include.
    
    ## Invoking an <inclusion> does not require its use. 
    
    ## For more on this, see main.xml#inclusions-and-keys
    element inclusion { ed-stamp?, internal-xml-id, (comment* & entity-digital-tan-other-ref) }
key-list = key-item*
key-item =
    
    ## specifies a TAN-key file that defines concepts that may be invoked by @which.
    
    ## For more discussion, see main.xml#tan-key
    element key {
        ed-stamp?,
        (inclusion | (comment* & entity-digital-tan-other-ref))
    }
source-list = source-item
source-item =
    
    ## identifies the source upon which the data in the <body> of the current file depends.
    
    ## TAN-T and TAN-A-lm allow only one <source>. TAN-A-tok allows exactly two. All other TAN formats require one or more. 
    element source {
        ed-stamp?,
        (inclusion
         | (source-id-opt,
            (comment*
             & (entity-nondigital-ref
                | entity-digital-generic-ref
                | entity-digital-tan-other-ref))))
    }

## Parameter to indicate whether <source> should be allowed to take xml:id (forbidden for TAN files with only one source; mandated otherwise)
source-id-opt = empty
see-also-list = see-also-item*
see-also-item =
    
    ## identifies other documents that are related to the current file.
    element see-also {
        ed-stamp?,
        (inclusion
         | (relationship,
            (comment* & (entity-digital-generic-ref | entity-digital-tan-other-ref))))
    }
# definitions are treated below
definition-list =
    
    ## lists terminology and definitions assumed in encoding the data.
    element definitions { ed-stamp?, (comment* & definition-core & definition-non-core) }

## normalizations are defined at more specific levels
alter-statement = alter-element?
alter-element =
    
    ## declares alterations that have been made, or should be made, to the source(s).
    element alter {
        ed-stamp?,
        (inclusion
         | (alter-condition,
            (comment* & (alter-core, alter-non-core))))
    }
alter-condition = empty
alter-core = empty
alter-non-core = empty
resp-list = resp-item+
resp-item =
    
    ## specifies a role held by one or more persons, organizations, or algorithms, perhaps during a specified time period.
    element resp {
        ed-stamp?,
        (inclusion | (agent-ref, role-ref, period-ref?))
    }
change-log =
    
    ## declares a change made to the current file. Must credit an <agent>, specified by @who, and a time the change was made, specified by @when.
    
    ## Collectively, <change> elements are called the changelog, the revision history of the document. 
    
    ## The editor has discretion as to how long or detailed a <change> should be, or how many should be retained in a changelog. Ideally, <change>s documenting every published version should be retained.
    
    ## <change> elements may appear in any order, but it is good practice to put the most recent at the top.
    element change { ed-stamp?, when-claim, error-flag?, agent-ref, text }+
# BODY
TAN-body =
    
    ## contains the data
    element body {
        progress?, ed-stamp?, body-attributes-non-core, (body-content-core & body-content-non-core)
    }
body-attributes-non-core = empty
body-content-core = comment*
body-content-non-core = empty
body-group =
    
    ## collects items that share a common property, defined by the <group-type> to which it refers.
    element group {
        ed-stamp?,
        (inclusion
         | (group-attributes, (body-group | body-item)+))
    }
group-attributes = type?, n?
# items are defined by the master schemas
body-item = empty
# TAIL
TAN-tail =
    
    ## permits any arbitrary content. This element is suitable as a placeholder for temporary data, especially to facilitate time-consuming validation routines. 
    element tail { any-content }
any-content = any-element* & text
any-element = element * { any-attribute*, any-content }
# We omit @xml:id to avoid id conflicts
any-attribute = attribute * - xml:id { text }
# 
# PART THREE OF THREE: DEFINITIONS
definition-core =
    defn-agent+
    & defn-role+
    & defn-period*
    & defn-alias*
    & defn-relationship*
    & defn-ambig-numerals?
definition-non-core = empty
# definitions that take take an id if that is the default for the format
defn-pattern-default =
    ed-stamp?,
    (inclusion
     | (defn-id-ref-opt, (comment* & entity-nondigital-ref)))
# definitions that MUST take an id
defn-pattern-id =
    ed-stamp?,
    (inclusion
     | (internal-xml-id, (comment* & entity-nondigital-ref)))
# definitions that MAY NOT take an id
defn-pattern-no-id =
    ed-stamp?,
    (inclusion | (comment* & entity-nondigital-ref))
# definitions that are constrained (verbs)
defn-pattern-constrained =
    ed-stamp?,
    (inclusion
     | (defn-id-ref-opt, (comment* & entity-nondigital-with-constraints-ref)))
# definitions for languages
defn-pattern-language =
    ed-stamp?,
    (inclusion
     | (defn-id-ref-opt,
        (comment* & (lang-outside*, entity-nondigital-ref))))
# agents are persons, organizations, or algorithms
defn-agent = defn-pers | defn-org | defn-alg
defn-alias =
    
    ## assigns a group of xml:id values to a single xml:id.
    
    ## This feature is useful for referring repeatedly to a group of agents, works, scripta, etc. 
    element alias {
        ed-stamp?,
        (inclusion
         | ((internal-xml-id | internal-non-xml-id), internal-idrefs))
    }
defn-ambig-numerals =
    
    ## specifies whether letters that can be interpreted both as letter numerals and as roman numerals should be interpreted as the latter.
    
    ## E.g., 'c' would be interpreted as 3 if false and 100 if true.
    
    ## If element is not present, the value is assumed to be true.
    element ambiguous-letter-numerals-are-roman { xsd:boolean }
defn-alg =
    
    ## contains an IRI + name pattern identifying an algorithm.
    
    ## Algorithm covers any set of computational instructions. It does not include the hardware or software used to run the algorithm. For example, a set of XSLT styleshteets is an algorithm, but the engine (e.g., Saxon) or software (e.g., oXygen) is not.  
    element algorithm { defn-pattern-id }
defn-div-type =
    
    ## declares a type of textual division (e.g., title, paragraph, stanza). You may have as many <div-types> as you wish, and they need not all be used.
    
    ## For more information, see main.xml#reference_system
    
    ## This element takes a reserved keyword or IRI + name pattern. See main.xml#keywords-div-type for suggested values. 
    element div-type { defn-pattern-id }
defn-group-type =
    
    ## defines types of <group>s. See main.xml# keywords-group-type
    element group-type { defn-pattern-id }

## Option to allow an @xml:id in children of <definitions>
defn-id-ref-opt = empty
defn-org =
    
    ## contains an IRI + name pattern identifying an organization, a group of persons, whether formally incorporated or not.
    element organization { defn-pattern-id }
defn-period =
    
    ## defines a period of time.
    element period {
        ed-stamp?,
        (inclusion
         | (internal-xml-id,
            
            ## specifies the beginning of a period of time
            attribute from { xsd:dateTime | xsd:date },
            
            ## specifies the end of a period of time
            attribute to { xsd:dateTime | xsd:date }))
    }
defn-pers =
    
    ## contains an IRI + name pattern identifying an individual human being.
    element person { defn-pattern-id }
defn-relationship =
    
    ## specifies a relationship that one document has to another.
    
    ## See main.xml#keywords-relationship for standardized vocabulary.
    element relationship {
        ed-stamp?,
        (inclusion | (internal-xml-id, entity-nondigital-ref))
    }
defn-role =
    
    ## specifies a role (responsibility, task, or activity) that one or more <agent>s did in creating or editing the data.
    
    ## A role may be any activity, e.g., editor, funder, supervisor, data-processor, peer reviewer, patron, defined through the enclosed IRI + name pattern.
    element role { defn-pattern-id }
defn-tok-def =
    
    ## takes a regular expression to define a word token. This element will be used to segment a string into token and non-token components. 
    
    ## This element takes attributes that function as the parameters for the function xsl:analyze-string (see https://www.w3.org/TR/xslt-30/#element-analyze-string).
    
    ## For more see main.xml#defining_tokens
    element token-definition {
        ed-stamp?,
        (inclusion
         | (sources-ref,
            (keyword-ref | (func-param-pattern, func-param-flags?))))
    }
defn-vers =
    
    ## identifies the version of a work. Applicable to sources that contain multiple versions, e.g., original text and facing translations. Like <work>, <version> points to a conceptual entity, not a physical one.
    
    ## In the context of a class 1 file, the entity identified by <version> is assumed to be a version of the entity defined in <work>. In TAN-c files, however, no relationship is assumed between <version> and any putative work, unless explicitly stated in that file. 
    
    ## Very few work-versions have their own URN names. It is advisable to assign a tag URN or a UUID. If you have used an IRI for <work> that you are entitled to modify, you may wish to add a suffix that will name the version. If you need to specify exactly where on a text-bearing object a version appears, <desc> or <comment> should be used.
    
    ## For more, see main.xml#conceptual_works
    element version { defn-pattern-default }
defn-work =
    
    ## identifies a creative textual work, understood conceptually, not physically (e.g., Homer's Iliad, not a particular version or copy of it).
    
    ## The term "work" is only loosely defined in TAN. Any text that has enough unity to be referred to in ordinary conversation as a single entity may be identified as a work. A work may be composed of other works, be a part of other works, or even overlap with other works. E.g., the Lord's Prayer, the Gospel of Luke, the Tetravengelion, the New Testament, and the Bible are all valid works, despite the complex relationship between each of them.
    
    ## This element takes the IRI + name pattern. For more, see main.xml#conceptual_works
    element work { defn-pattern-default }
