namespace ns1 = "tag:textalign.net,2015:ns"

include "TAN-core.rnc" inherit = ns1 {
    definition-non-core = definition-class-2 & definition-non-class-2
    alter-statement = alter-element*
    alter-non-core = alter-class-2, alter-non-class-2
    alter-condition = action-condition
    action-condition-attributes = sources-ref, div-type-ref?
    body-content-non-core = body-content-class-2 & body-content-non-class-2
    
    ## All sources are TAN files, so no source rights should be declared--they're already stated
    sources-ref =
        
        ## refers to the ID of one or more <source>s 
        attribute src { text }
}
definition-class-2 = defn-tok-def* & defn-group-type*
definition-non-class-2 = empty
alter-class-2 = alt-skip*, alt-rename*, alt-equate*, alt-reassign*
alter-non-class-2 = empty
body-content-class-2 = empty
body-content-non-class-2 = empty
source-ref =
    
    ## refers to the ID of only one <source>
    attribute src { xsd:NCName }
alt-skip =
    
    ## marks parts of a source that have been ignored or should be skipped, either shallowly (default) or deeply.
    
    ## Note, the shallow skip of a <div> may result in the source with leaf divs that have the same reference, breaking the Leaf Div Uniqueness Rule (LDUR). See main.xml#leaf_div_uniqueness_rule
    
    ## This element is useful for ignoring extraneous divs, e.g., where a source has introduced divs that do not exist in other versions of the same work. For example, a transcription may group the topmost divisions of a text into parts, or may adopt superfluous divisions (e.g., introducing a <div> for chapter in the New Testament book Philemon, which does not have more than one chapter, and can be identified purely by verse).  
    element skip {
        ed-stamp?,
        (inclusion
         | (shallow-option?, (n | pointer-to-div-item | div-type-ref)?))
    }
alt-rename =
    
    ## provisionally reassigns values of @n's in class 1 sources, or their calculated ref value, to another value.
    
    ## Values of @n will be renamed before attempting to rename references. Only the first renaming match will be applied.
    element rename {
        ed-stamp?,
        (inclusion | (simple-rename | complex-rename))
    }
simple-rename = (n, new-name) | (pointer-to-div-item, new-ref-name)
complex-rename = (n | pointer-to-div-range), (increment | new-name)
increment =
    
    ## specifies an amount by which an series of @n values or the last component in a series of @ref values should be incremented or decremented.
    attribute by { xsd:integer }
new-name =
    
    ## provides the new name for an @n or reference that is to be renamed
    attribute new { text }
new-ref-name =
    
    ## provides the new ref for a <div> that is to be renamed
    attribute new { div-item-ref }
alt-equate =
    
    ## declares an ad hoc equivalence between works or @n values.
    
    ## This is useful for handling sources that have not used the the same <IRI>s in defining works that you believe to be equivalent, or for associating values of @n that should be treated as synonymous.
    
    ## Equating is transitive and greedy. If work A is defined with <IRI> X, work B with <IRI>s X and Y, and work C with only <IRI> Y, then works A and C will be automatically equated.
    
    ## This element does not imply that the works are necessarily one and the same, or than the @n values are the same. It merely states that, for the purposes of this alignment, they should be treated as equivalent.
    element equate {
        ed-stamp?,
        (inclusion | n)
    }
alt-reassign =
    
    ## identifies word fragments that should be moved from one ref to another
    element reassign {
        ed-stamp?,
        (inclusion | (tok-ref-range+, target-div-ref))
    }
target-div-ref =
    
    ## indicates a ref to which the preceding <tok>s should be moved.
    element to { pointer-to-div-item }

## Option to include an internal id. Not needed in TAN-A-lm files.
id-option = internal-xml-id
shallow-option =
    
    ## indicates whether skipping should be done shallowly (default) or deeply
    attribute shallow { xsd:boolean }
# div references
div-type-ref =
    
    ## is used by class-2 files to point to one or more <div-type>s in class-1 files. Permits multiple values separated by spaces.
    attribute div-type { text }
div-ref-range =
    
    ## refers to one or more <div>s.
    
    ## <div-ref>s are expanded against @src/@work and @ref. That is, a <div-ref> points to every div of every source cited.
    
    element div-ref { ed-stamp?, pointer-to-div-range }
# token references
tok-single-selector-attributes = token-value-ref | item-pos-ref | (token-value-ref, item-pos-ref)
tok-mult-selector-attributes = token-value-ref | seq-pos-ref | (token-value-ref, seq-pos-ref)
tok-ref = tok-ref-item | tok-ref-group | tok-ref-range
tok-ref-item =
    
    ## identifies one or more words or word fragments. Used by class 2 files to make assertions about specific words. 
    
    ## In TAN-A-div and TAN-A-tok files, <tok> has no linguistic connotations; in TAN-A-lm, it normally does.
    
    ## <tok>s that are restricted to a single token, or a portion of a single token. This is the normal behavior of <tok>. Multiple values in @src, @ref, and @pos will result in expansion across all values. But multiple values of @chars are taken to refer to the constituent parts of a single <tok> and so no expansion occurs on @chars.
    
    ## This syntax allows multiple <tok>s to be collapsed into a single one, to save space and perhaps enhance legibility. For example, a <tok> with 2 values for @src, 3 for @ref, 4 for @pos, and 5 for @chars will result in a <tok> that points to 24 tokens, each of which is filtered to the same five characters (by position, not content). Put another way, <tok src="X" ref="a" pos="1"/> and <tok src="X" ref="a" pos="2"/> is always identical to <tok src="X" ref="a" pos="1-2"/>
    
    ## If you wish to treat multiple word fragments as a single token, use <group>.
    element tok {
        ed-stamp?,
        tok-sources-ref-opt,
        pointer-to-div-range,
        tok-mult-selector-attributes,
        tok-cert-opt,
        char-ref?
    }
tok-ref-group =
    
    ## groups references that should be treated as a single passage.
    element group {
        ed-stamp?,
        (inclusion
         | (group-attributes, tok-ref-item+))
    }
tok-ref-range =
    element tok {
        ed-stamp?, pointer-to-div-item, (tok-mult-selector-attributes | tok-range-selector)
    }
tok-range-selector =
    
    ## points to a single token that is the start of a range of tokens to be selected
    element from { tok-single-selector-attributes },
    
    ## points to a single token that is the end of a range of tokens to be selected
    element to { tok-single-selector-attributes }
tok-sources-ref-opt = sources-ref
tok-cert-opt = cert-claim?
pointer-to-div-range =
    
    ## lists references to one or more <div>s. It consists of one or more simple references joined by commas or hyphens. A simple reference is a string value that points to a single <div>, e.g., "1 1". 
    
    ## Truncation is allowed. For example, 1 1 - 3 will be interpreted first as 1 1 through 1 3; if that is invalid, it will be interpeted as 1 1 through 3. Other examples: '2.4 - 7, 9', 'iv 7 - 9'
    
    ## In a range with members of uneven depth, those <div>s that are closest to the shallowest member are retrieved. For example, 2 - 3 2 2 might fetch 2, 3 1, 3 2 1, 3 2 2 (and not 3 or 3 1 1).
    
    ## For more, see main.xml#class_2_body 
    attribute ref { div-range-ref }
pointer-to-div-item = attribute ref { div-item-ref }
token-value-ref =
    
    ## specifies a particular word token by means of its string value. Treated as a constrained regular expression (the expression must match the entire token, case-sensitive).
    
    ## For more see main.xml#attr_pos_and_val
    attribute val {
        xsd:string { pattern = ".+" }
    }
item-pos-ref =
    
    ## lists one items, specified through Arabic numerals and the keyword 'last' or 'last-X' (where X is a valid number).
    
    ## Examples: '1', 'last', 'last-3 - last-1'
    
    ## For more see main.xml#attr_pos_and_val
    attribute pos { item-picker }
seq-pos-ref =
    
    ## lists one or more items, specified through Arabic numerals and the keyword 'last' or 'last-X' (where X is a valid number), joined with commas or hyphens.
    
    ## Examples: '1', 'last', 'last-3 - last-1', '1, 3, 5, 7 - 11, last-8, last'
    
    ## For more see main.xml#attr_pos_and_val
    attribute pos { seq-picker }
char-ref =
    
    ## list of one or more characters, specified through Arabic numerals, the keyword 'last' or 'last-X' (where X is a valid number), joined with commas or hyphens.
    
    ## Examples: '1', 'last', 'last-3 - last-1', '1, 3, 5, 7 - 11, last-8, last'
    attribute chars { seq-picker }
# continuation-opt = continuation
# continuation =
#    
#    ## indicates whether the current element is continued by the next one and to be treated as a single one. Value must be 1 or true, implied by the very presence of the attribute. If you wish to decare it to be false, delete the attribute altogether.

#    ## This feature is useful in <tok> for rejoining the portion of a word split across two <div>s, or for uniting into a single linguistic token multiple tokens separated by the tokenization process, e.g., "pom pom". 

#    ## This feature is useful in <div-ref> for creating groups of references that cannot be expressed in a single <div-ref>  
#    attribute cont {
#        xsd:boolean { pattern = "true|1" }
#    }
